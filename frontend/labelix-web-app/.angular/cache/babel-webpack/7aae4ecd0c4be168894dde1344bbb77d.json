{"ast":null,"code":"import _asyncToGenerator from \"/home/florentin/Documents/Projects/Labelix/frontend/labelix-web-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { Subject } from 'rxjs';\nimport { getAllUsers } from '../core-layer/states/state-definitions/userState';\nimport { select } from '@ngrx/store';\nimport { AddUsers, ClearUsers } from '../core-layer/states/actions/user.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../core-layer/services/user.service\";\nimport * as i2 from \"keycloak-angular\";\nimport * as i3 from \"@ngrx/store\"; // is responsible for everything which has to do with users, this involves authentication and management of other users\n\nexport class UserFacade {\n  constructor(userApi, keycloakService, store) {\n    this.userApi = userApi;\n    this.keycloakService = keycloakService;\n    this.store = store;\n    this.keycloakService.loadUserProfile().then(value => this.currentUser = value);\n    this.users$ = store.pipe(select(getAllUsers));\n    this.isLoggedIn$ = new Subject();\n  }\n\n  getIdentityClaims() {\n    return this.currentUser;\n  }\n\n  isAdmin() {\n    return this.keycloakService.getUserRoles().filter(value => value === 'admin').length === 1;\n  }\n\n  checkLoggedIn() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return yield _this.keycloakService.isLoggedIn();\n    })();\n  }\n\n  login() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this2.keycloakService.login({\n        redirectUri: window.location.origin\n      });\n    })();\n  }\n\n  logout() {\n    this.keycloakService.logout();\n    this.isLoggedIn$.next(false);\n  }\n\n  loadUsersIntoState() {\n    this.userApi.getItems().subscribe(value => {\n      this.store.dispatch(new ClearUsers());\n      this.store.dispatch(new AddUsers(value));\n    });\n  }\n\n  getUsersByProjectId(projectId) {\n    return this.userApi.getUsersByProjectId(projectId);\n  }\n\n  addUserToProjectViaId(projectId, other) {\n    return this.userApi.addUserToProject(projectId, other);\n  }\n\n  removeUserFromProjectViaId(projectId, other) {\n    return this.userApi.removeUserFromProject(projectId, other);\n  }\n\n}\n\nUserFacade.ɵfac = function UserFacade_Factory(t) {\n  return new (t || UserFacade)(i0.ɵɵinject(i1.UserService), i0.ɵɵinject(i2.KeycloakService), i0.ɵɵinject(i3.Store));\n};\n\nUserFacade.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserFacade,\n  factory: UserFacade.ɵfac\n});","map":{"version":3,"sources":["/home/florentin/Documents/Projects/Labelix/frontend/labelix-web-app/src/app/abstraction-layer/UserFacade.ts"],"names":["Subject","getAllUsers","select","AddUsers","ClearUsers","i0","i1","i2","i3","UserFacade","constructor","userApi","keycloakService","store","loadUserProfile","then","value","currentUser","users$","pipe","isLoggedIn$","getIdentityClaims","isAdmin","getUserRoles","filter","length","checkLoggedIn","isLoggedIn","login","redirectUri","window","location","origin","logout","next","loadUsersIntoState","getItems","subscribe","dispatch","getUsersByProjectId","projectId","addUserToProjectViaId","other","addUserToProject","removeUserFromProjectViaId","removeUserFromProject","ɵfac","UserFacade_Factory","t","ɵɵinject","UserService","KeycloakService","Store","ɵprov","ɵɵdefineInjectable","token","factory"],"mappings":"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","sourcesContent":["import { Subject } from 'rxjs';\nimport { getAllUsers } from '../core-layer/states/state-definitions/userState';\nimport { select } from '@ngrx/store';\nimport { AddUsers, ClearUsers } from '../core-layer/states/actions/user.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../core-layer/services/user.service\";\nimport * as i2 from \"keycloak-angular\";\nimport * as i3 from \"@ngrx/store\";\n// is responsible for everything which has to do with users, this involves authentication and management of other users\nexport class UserFacade {\n    constructor(userApi, keycloakService, store) {\n        this.userApi = userApi;\n        this.keycloakService = keycloakService;\n        this.store = store;\n        this.keycloakService.loadUserProfile().then(value => this.currentUser = value);\n        this.users$ = store.pipe(select(getAllUsers));\n        this.isLoggedIn$ = new Subject();\n    }\n    getIdentityClaims() {\n        return this.currentUser;\n    }\n    isAdmin() {\n        return this.keycloakService.getUserRoles().filter(value => value === 'admin').length === 1;\n    }\n    async checkLoggedIn() {\n        return await this.keycloakService.isLoggedIn();\n    }\n    async login() {\n        await this.keycloakService.login({\n            redirectUri: window.location.origin,\n        });\n    }\n    logout() {\n        this.keycloakService.logout();\n        this.isLoggedIn$.next(false);\n    }\n    loadUsersIntoState() {\n        this.userApi.getItems().subscribe(value => {\n            this.store.dispatch(new ClearUsers());\n            this.store.dispatch(new AddUsers(value));\n        });\n    }\n    getUsersByProjectId(projectId) {\n        return this.userApi.getUsersByProjectId(projectId);\n    }\n    addUserToProjectViaId(projectId, other) {\n        return this.userApi.addUserToProject(projectId, other);\n    }\n    removeUserFromProjectViaId(projectId, other) {\n        return this.userApi.removeUserFromProject(projectId, other);\n    }\n}\nUserFacade.ɵfac = function UserFacade_Factory(t) { return new (t || UserFacade)(i0.ɵɵinject(i1.UserService), i0.ɵɵinject(i2.KeycloakService), i0.ɵɵinject(i3.Store)); };\nUserFacade.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: UserFacade, factory: UserFacade.ɵfac });\n"]},"metadata":{},"sourceType":"module"}